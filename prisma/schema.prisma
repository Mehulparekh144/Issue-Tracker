generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(USER)
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  issues        Issue[] // Renamed "Issue" to "issues" to match Prisma conventions
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum Status {
  OPEN
  CLOSED
}

model Image {
  id      String  @id @default(cuid()) @map("_id")
  url     String
  key     String
  name    String
  issueId String?
  issue   Issue?  @relation(fields: [issueId], references: [id])
}

model TempImage {
  id   String @id @default(cuid()) @map("_id")
  url  String
  key  String
  name String
}

model Issue {
  id               String   @id @default(cuid()) @map("_id")
  issueTitle       String
  issueDescription String
  teamAssigned     Team     @relation(fields: [teamAssignedId], references: [id], onDelete: Cascade)
  assigner         User     @relation(fields: [assignerId], references: [id])
  assignedDate     DateTime
  deadlineDate     DateTime
  status           Status
  priority         Priority // Using the enum for priority
  teamAssignedId   String
  assignerId       String
  Image            Image[]
}

model Team {
  id     String  @id @default(cuid()) @map("_id")
  name   String
  size   Int     @default(0) 
  users  User[]
  issues Issue[]
}
