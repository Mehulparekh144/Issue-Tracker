generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  issues        Issue[] // Renamed "Issue" to "issues" to match Prisma conventions
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum Status {
  OPEN
  CLOSED
}

model Issue {
  id           String   @id @default(cuid()) @map("_id")
  issueNo      Int
  issueTitle   String
  teamAssigned Team     @relation(fields: [teamAssignedId], references: [id])
  assigner     User     @relation(fields: [assignerId], references: [id])
  assignedDate DateTime
  deadlineDate DateTime
  status       Status
  priority     Priority // Using the enum for priority

  teamAssignedId String
  assignerId     String
}

model Team {
  id     String  @id @default(cuid()) @map("_id")
  name   String
  size   Int     @default(0)
  users  User[]
  issues Issue[]
}
